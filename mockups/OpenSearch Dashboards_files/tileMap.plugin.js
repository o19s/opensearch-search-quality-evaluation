(function(modules){function webpackJsonpCallback(data){var chunkIds=data[0];var moreModules=data[1];var moduleId,chunkId,i=0,resolves=[];for(;i<chunkIds.length;i++){chunkId=chunkIds[i];if(Object.prototype.hasOwnProperty.call(installedChunks,chunkId)&&installedChunks[chunkId]){resolves.push(installedChunks[chunkId][0])}installedChunks[chunkId]=0}for(moduleId in moreModules){if(Object.prototype.hasOwnProperty.call(moreModules,moduleId)){modules[moduleId]=moreModules[moduleId]}}if(parentJsonpFunction)parentJsonpFunction(data);while(resolves.length){resolves.shift()()}}var installedModules={};var installedChunks={0:0};function jsonpScriptSrc(chunkId){return __webpack_require__.p+"tileMap.chunk."+chunkId+".js"}function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.e=function requireEnsure(chunkId){var promises=[];var installedChunkData=installedChunks[chunkId];if(installedChunkData!==0){if(installedChunkData){promises.push(installedChunkData[2])}else{var promise=new Promise((function(resolve,reject){installedChunkData=installedChunks[chunkId]=[resolve,reject]}));promises.push(installedChunkData[2]=promise);var script=document.createElement("script");var onScriptComplete;script.charset="utf-8";script.timeout=120;if(__webpack_require__.nc){script.setAttribute("nonce",__webpack_require__.nc)}script.src=jsonpScriptSrc(chunkId);var error=new Error;onScriptComplete=function(event){script.onerror=script.onload=null;clearTimeout(timeout);var chunk=installedChunks[chunkId];if(chunk!==0){if(chunk){var errorType=event&&(event.type==="load"?"missing":event.type);var realSrc=event&&event.target&&event.target.src;error.message="Loading chunk "+chunkId+" failed.\n("+errorType+": "+realSrc+")";error.name="ChunkLoadError";error.type=errorType;error.request=realSrc;chunk[1](error)}installedChunks[chunkId]=undefined}};var timeout=setTimeout((function(){onScriptComplete({type:"timeout",target:script})}),12e4);script.onerror=script.onload=onScriptComplete;document.head.appendChild(script)}}return Promise.all(promises)};__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";__webpack_require__.oe=function(err){console.error(err);throw err};var jsonpArray=window["tileMap_bundle_jsonpfunction"]=window["tileMap_bundle_jsonpfunction"]||[];var oldJsonpFunction=jsonpArray.push.bind(jsonpArray);jsonpArray.push=webpackJsonpCallback;jsonpArray=jsonpArray.slice();for(var i=0;i<jsonpArray.length;i++)webpackJsonpCallback(jsonpArray[i]);var parentJsonpFunction=oldJsonpFunction;return __webpack_require__(__webpack_require__.s=8)})([function(module,exports){module.exports=__osdSharedDeps__.OsdI18n},function(module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__);var ns=__osdBundles__.get("plugin/mapsLegacy/public");Object.defineProperties(__webpack_exports__,Object.getOwnPropertyDescriptors(ns))},function(module,exports){module.exports=__osdSharedDeps__.React},function(module,exports){module.exports=__osdSharedDeps__.Lodash},function(module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__);var ns=__osdBundles__.get("plugin/charts/public");Object.defineProperties(__webpack_exports__,Object.getOwnPropertyDescriptors(ns))},function(module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__);var ns=__osdBundles__.get("plugin/opensearchDashboardsUtils/public");Object.defineProperties(__webpack_exports__,Object.getOwnPropertyDescriptors(ns))},function(module,exports){module.exports=__osdSharedDeps__.ElasticEui},function(module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__);var ns=__osdBundles__.get("plugin/visDefaultEditor/public");Object.defineProperties(__webpack_exports__,Object.getOwnPropertyDescriptors(ns))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _node_modules_val_loader_dist_cjs_js_key_tileMap_osd_ui_shared_deps_public_path_module_creator_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(9);var _node_modules_val_loader_dist_cjs_js_key_tileMap_osd_ui_shared_deps_public_path_module_creator_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_val_loader_dist_cjs_js_key_tileMap_osd_ui_shared_deps_public_path_module_creator_js__WEBPACK_IMPORTED_MODULE_0__);__osdBundles__.define("plugin/tileMap/public",__webpack_require__,10)},function(module,exports,__webpack_require__){__webpack_require__.p=window.__osdPublicPath__["tileMap"]},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"plugin",(function(){return public_plugin}));var public_=__webpack_require__(1);var external_osdSharedDeps_OsdI18n_=__webpack_require__(0);const createTileMapFn=()=>({name:"tilemap",type:"render",context:{types:["opensearch_dashboards_datatable"]},help:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.function.help",{defaultMessage:"Tilemap visualization"}),args:{visConfig:{types:["string","null"],default:'"{}"'}},fn(context,args){const visConfig=JSON.parse(args.visConfig);const{geohash:geohash,metric:metric,geocentroid:geocentroid}=visConfig.dimensions;const convertedData=Object(public_["convertToGeoJson"])(context,{geohash:geohash,metric:metric,geocentroid:geocentroid});if(geohash&&geohash.accessor){convertedData.meta.geohash=context.columns[geohash.accessor].meta}return{type:"render",as:"visualization",value:{visData:convertedData,visType:"tile_map",visConfig:visConfig,params:{listenOnChange:true}}}}});var external_osdSharedDeps_React_=__webpack_require__(2);var external_osdSharedDeps_React_default=__webpack_require__.n(external_osdSharedDeps_React_);var visDefaultEditor_public_=__webpack_require__(7);var external_osdSharedDeps_Lodash_=__webpack_require__(3);var external_osdSharedDeps_Lodash_default=__webpack_require__.n(external_osdSharedDeps_Lodash_);var opensearchDashboardsUtils_public_=__webpack_require__(5);const[getCoreService,setCoreService]=Object(opensearchDashboardsUtils_public_["createGetterSetter"])("Core");const[getFormatService,setFormatService]=Object(opensearchDashboardsUtils_public_["createGetterSetter"])("vislib data.fieldFormats");const[getQueryService,setQueryService]=Object(opensearchDashboardsUtils_public_["createGetterSetter"])("Query");const[getShareService,setShareService]=Object(opensearchDashboardsUtils_public_["createGetterSetter"])("Share");const[getOpenSearchDashboardsLegacy,setOpenSearchDashboardsLegacy]=Object(opensearchDashboardsUtils_public_["createGetterSetter"])("OpenSearchDashboardsLegacy");function tooltipFormatter(metricTitle,metricFormat,feature){if(!feature){return""}return[{label:metricTitle,value:metricFormat(feature.properties.value)},{label:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.tooltipFormatter.latitudeLabel",{defaultMessage:"Latitude"}),value:feature.geometry.coordinates[1]},{label:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.tooltipFormatter.longitudeLabel",{defaultMessage:"Longitude"}),value:feature.geometry.coordinates[0]}]}function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return typeof key==="symbol"?key:String(key)}function _toPrimitive(input,hint){if(typeof input!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(typeof res!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return(hint==="string"?String:Number)(input)}function scaleBounds(bounds){const scale=.5;const topLeft=bounds.top_left;const bottomRight=bounds.bottom_right;let latDiff=Object(external_osdSharedDeps_Lodash_["round"])(Math.abs(topLeft.lat-bottomRight.lat),5);const lonDiff=Object(external_osdSharedDeps_Lodash_["round"])(Math.abs(bottomRight.lon-topLeft.lon),5);if(latDiff===0)latDiff=lonDiff;const latDelta=latDiff*scale;let topLeftLat=Object(external_osdSharedDeps_Lodash_["round"])(topLeft.lat,5)+latDelta;if(topLeftLat>90)topLeftLat=90;let bottomRightLat=Object(external_osdSharedDeps_Lodash_["round"])(bottomRight.lat,5)-latDelta;if(bottomRightLat<-90)bottomRightLat=-90;const lonDelta=lonDiff*scale;let topLeftLon=Object(external_osdSharedDeps_Lodash_["round"])(topLeft.lon,5)-lonDelta;if(topLeftLon<-180)topLeftLon=-180;let bottomRightLon=Object(external_osdSharedDeps_Lodash_["round"])(bottomRight.lon,5)+lonDelta;if(bottomRightLon>180)bottomRightLon=180;return{top_left:{lat:topLeftLat,lon:topLeftLon},bottom_right:{lat:bottomRightLat,lon:bottomRightLon}}}const createTileMapVisualization=dependencies=>{const{getZoomPrecision:getZoomPrecision,getPrecision:getPrecision,BaseMapsVisualization:BaseMapsVisualization}=dependencies;return class CoordinateMapsVisualization extends BaseMapsVisualization{constructor(element,vis){super(element,vis);_defineProperty(this,"updateGeohashAgg",()=>{const geohashAgg=this._getGeoHashAgg();if(!geohashAgg)return;const updateVarsObject={name:"bounds",data:{}};const bounds=this._opensearchDashboardsMap.getBounds();const mapCollar=scaleBounds(bounds);if(!Object(public_["geoContains"])(geohashAgg.aggConfigParams.boundingBox,mapCollar)){updateVarsObject.data.boundingBox={top_left:mapCollar.top_left,bottom_right:mapCollar.bottom_right}}else{updateVarsObject.data.boundingBox=geohashAgg.aggConfigParams.boundingBox}const zoomPrecision=getZoomPrecision();updateVarsObject.data.precision=geohashAgg.aggConfigParams.autoPrecision?zoomPrecision[this.vis.getUiState().get("mapZoom")]:getPrecision(geohashAgg.aggConfigParams.precision);this.vis.eventsSubject.next(updateVarsObject)});this._geohashLayer=null;this._tooltipFormatter=Object(public_["mapTooltipProvider"])(element,tooltipFormatter)}async render(opensearchResponse,visParams){getOpenSearchDashboardsLegacy().loadFontAwesome();await super.render(opensearchResponse,visParams)}async _makeOpenSearchDashboardsMap(){await super._makeOpenSearchDashboardsMap();let previousPrecision=this._opensearchDashboardsMap.getGeohashPrecision();let precisionChange=false;const uiState=this.vis.getUiState();uiState.on("change",prop=>{if(prop==="mapZoom"||prop==="mapCenter"){this.updateGeohashAgg()}});this._opensearchDashboardsMap.on("zoomchange",()=>{precisionChange=previousPrecision!==this._opensearchDashboardsMap.getGeohashPrecision();previousPrecision=this._opensearchDashboardsMap.getGeohashPrecision()});this._opensearchDashboardsMap.on("zoomend",()=>{const geohashAgg=this._getGeoHashAgg();if(!geohashAgg){return}const isAutoPrecision=typeof geohashAgg.aggConfigParams.autoPrecision==="boolean"?geohashAgg.aggConfigParams.autoPrecision:true;if(!isAutoPrecision){return}if(precisionChange){this.updateGeohashAgg()}else{this._updateData(this._geoJsonFeatureCollectionAndMeta)}});this._opensearchDashboardsMap.addDrawControl();this._opensearchDashboardsMap.on("drawCreated:rectangle",event=>{const geohashAgg=this._getGeoHashAgg();this.addSpatialFilter(geohashAgg,"geo_bounding_box",event.bounds)});this._opensearchDashboardsMap.on("drawCreated:polygon",event=>{const geohashAgg=this._getGeoHashAgg();this.addSpatialFilter(geohashAgg,"geo_polygon",{points:event.points})})}async _updateData(geojsonFeatureCollectionAndMeta){if(this._getMapsParams().mapType!=="Heatmap"&&geojsonFeatureCollectionAndMeta===this._geoJsonFeatureCollectionAndMeta){return}if(this._geohashLayer){this._opensearchDashboardsMap.removeLayer(this._geohashLayer);this._geohashLayer=null}if(!geojsonFeatureCollectionAndMeta){this._geoJsonFeatureCollectionAndMeta=null;this._opensearchDashboardsMap.removeLayer(this._geohashLayer);this._geohashLayer=null;return}if(!this._geoJsonFeatureCollectionAndMeta||!geojsonFeatureCollectionAndMeta.featureCollection.features.length){this._geoJsonFeatureCollectionAndMeta=geojsonFeatureCollectionAndMeta;this.updateGeohashAgg()}this._geoJsonFeatureCollectionAndMeta=geojsonFeatureCollectionAndMeta;this._recreateGeohashLayer()}async _recreateGeohashLayer(){const{GeohashLayer:GeohashLayer}=await Promise.all([__webpack_require__.e(1),__webpack_require__.e(2)]).then(__webpack_require__.bind(null,14));if(this._geohashLayer){this._opensearchDashboardsMap.removeLayer(this._geohashLayer);this._geohashLayer=null}const geohashOptions=this._getGeohashOptions();this._geohashLayer=new GeohashLayer(this._geoJsonFeatureCollectionAndMeta.featureCollection,this._geoJsonFeatureCollectionAndMeta.meta,geohashOptions,this._opensearchDashboardsMap.getZoomLevel(),this._opensearchDashboardsMap,(await Object(public_["lazyLoadMapsLegacyModules"])()).L);this._opensearchDashboardsMap.addLayer(this._geohashLayer)}async _updateParams(){await super._updateParams();this._opensearchDashboardsMap.setDesaturateBaseLayer(this._params.isDesaturated);const geohashOptions=this._getGeohashOptions();if(!this._geohashLayer||!this._geohashLayer.isReusable(geohashOptions)){if(this._geoJsonFeatureCollectionAndMeta){this._recreateGeohashLayer()}this._updateData(this._geoJsonFeatureCollectionAndMeta)}}_getGeohashOptions(){const newParams=this._getMapsParams();const metricDimension=this._params.dimensions.metric;const metricLabel=metricDimension?metricDimension.label:"";const metricFormat=getFormatService().deserialize(metricDimension&&metricDimension.format);return{label:metricLabel,valueFormatter:this._geoJsonFeatureCollectionAndMeta?metricFormat.getConverterFor("text"):null,tooltipFormatter:this._geoJsonFeatureCollectionAndMeta?this._tooltipFormatter.bind(null,metricLabel,metricFormat.getConverterFor("text")):null,mapType:newParams.mapType,isFilteredByCollar:this._isFilteredByCollar(),colorRamp:newParams.colorSchema,heatmap:{heatClusterSize:newParams.heatClusterSize}}}addSpatialFilter(agg,filterName,filterData){if(!agg){return}const indexPatternName=agg.indexPatternId;const field=agg.aggConfigParams.field;const filter={meta:{negate:false,index:indexPatternName}};filter[filterName]={ignore_unmapped:true};filter[filterName][field]=filterData;const{filterManager:filterManager}=getQueryService();filterManager.addFilters([filter]);this.vis.updateState()}_getGeoHashAgg(){return this._geoJsonFeatureCollectionAndMeta&&this._geoJsonFeatureCollectionAndMeta.meta.geohash}_isFilteredByCollar(){const DEFAULT=false;const agg=this._getGeoHashAgg();if(agg){return Object(external_osdSharedDeps_Lodash_["get"])(agg,"aggConfigParams.isFilteredByCollar",DEFAULT)}else{return DEFAULT}}}};var external_osdSharedDeps_ElasticEui_=__webpack_require__(6);var charts_public_=__webpack_require__(4);function TileMapOptions(props){var _vis$type$visConfig;const{stateParams:stateParams,setValue:setValue,vis:vis}=props;Object(external_osdSharedDeps_React_["useEffect"])(()=>{if(!stateParams.mapType){setValue("mapType",vis.type.editorConfig.collections.mapTypes[0])}},[setValue,stateParams.mapType,vis.type.editorConfig.collections.mapTypes]);return external_osdSharedDeps_React_default.a.createElement(external_osdSharedDeps_React_default.a.Fragment,null,external_osdSharedDeps_React_default.a.createElement(external_osdSharedDeps_ElasticEui_["EuiPanel"],{paddingSize:"s"},external_osdSharedDeps_React_default.a.createElement(charts_public_["SelectOption"],{label:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.visParams.mapTypeLabel",{defaultMessage:"Map type"}),options:vis.type.editorConfig.collections.mapTypes,paramName:"mapType",value:stateParams.mapType,setValue:setValue}),stateParams.mapType===public_["MapTypes"].Heatmap?external_osdSharedDeps_React_default.a.createElement(charts_public_["RangeOption"],{label:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.visParams.clusterSizeLabel",{defaultMessage:"Cluster size"}),max:3,min:1,paramName:"heatClusterSize",step:.1,value:stateParams.heatClusterSize,setValue:setValue}):external_osdSharedDeps_React_default.a.createElement(charts_public_["SelectOption"],{label:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.visParams.colorSchemaLabel",{defaultMessage:"Color schema"}),options:vis.type.editorConfig.collections.colorSchemas,paramName:"colorSchema",value:stateParams.colorSchema,setValue:setValue}),external_osdSharedDeps_React_default.a.createElement(charts_public_["BasicOptions"],props),external_osdSharedDeps_React_default.a.createElement(charts_public_["SwitchOption"],{disabled:!((_vis$type$visConfig=vis.type.visConfig)!==null&&_vis$type$visConfig!==void 0&&_vis$type$visConfig.canDesaturate),label:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.visParams.desaturateTilesLabel",{defaultMessage:"Desaturate tiles"}),tooltip:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.visParams.reduceVibrancyOfTileColorsTip",{defaultMessage:"Reduce the vibrancy of tile colors. This does not work in any version of Internet Explorer."}),paramName:"isDesaturated",value:stateParams.isDesaturated,setValue:setValue})),external_osdSharedDeps_React_default.a.createElement(external_osdSharedDeps_ElasticEui_["EuiSpacer"],{size:"s"}),external_osdSharedDeps_React_default.a.createElement(public_["WmsOptions"],props))}const supportsCssFilters=function(){const e=document.createElement("img");const rules=["webkitFilter","mozFilter","msFilter","filter"];const test="grayscale(1)";rules.forEach((function(rule){e.style[rule]=test}));document.body.appendChild(e);const styles=window.getComputedStyle(e);const can=external_osdSharedDeps_Lodash_default()(styles).pick(rules).includes(test);document.body.removeChild(e);return can}();function createTileMapTypeDefinition(dependencies){const CoordinateMapsVisualization=createTileMapVisualization(dependencies);const{uiSettings:uiSettings,getServiceSettings:getServiceSettings}=dependencies;return{name:"tile_map",title:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.mapTitle",{defaultMessage:"Coordinate Map"}),icon:"visMapCoordinate",description:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.mapDescription",{defaultMessage:"Plot latitude and longitude coordinates on a map"}),visConfig:{canDesaturate:Boolean(supportsCssFilters),defaults:{colorSchema:"Yellow to Red",mapType:"Scaled Circle Markers",isDesaturated:true,addTooltip:true,heatClusterSize:1.5,legendPosition:"bottomright",mapZoom:2,mapCenter:[0,0],wms:uiSettings.get("visualization:tileMap:WMSdefaults")}},visualization:CoordinateMapsVisualization,responseHandler:public_["convertToGeoJson"],editorConfig:{collections:{colorSchemas:charts_public_["truncatedColorSchemas"],legendPositions:[{value:"bottomleft",text:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.editorConfig.legendPositions.bottomLeftText",{defaultMessage:"Bottom left"})},{value:"bottomright",text:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.editorConfig.legendPositions.bottomRightText",{defaultMessage:"Bottom right"})},{value:"topleft",text:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.editorConfig.legendPositions.topLeftText",{defaultMessage:"Top left"})},{value:"topright",text:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.editorConfig.legendPositions.topRightText",{defaultMessage:"Top right"})}],mapTypes:[{value:public_["MapTypes"].ScaledCircleMarkers,text:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.editorConfig.mapTypes.scaledCircleMarkersText",{defaultMessage:"Scaled circle markers"})},{value:public_["MapTypes"].ShadedCircleMarkers,text:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.editorConfig.mapTypes.shadedCircleMarkersText",{defaultMessage:"Shaded circle markers"})},{value:public_["MapTypes"].ShadedGeohashGrid,text:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.editorConfig.mapTypes.shadedGeohashGridText",{defaultMessage:"Shaded geohash grid"})},{value:public_["MapTypes"].Heatmap,text:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.editorConfig.mapTypes.heatmapText",{defaultMessage:"Heatmap"})}],tmsLayers:[]},optionsTemplate:props=>external_osdSharedDeps_React_default.a.createElement(TileMapOptions,props),schemas:new visDefaultEditor_public_["Schemas"]([{group:"metrics",name:"metric",title:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.map.editorConfig.schemas.metricTitle",{defaultMessage:"Value"}),min:1,max:1,aggFilter:["count","avg","sum","min","max","cardinality","top_hits"],defaults:[{schema:"metric",type:"count"}]},{group:"buckets",name:"segment",title:external_osdSharedDeps_OsdI18n_["i18n"].translate("tileMap.vis.map.editorConfig.schemas.geoCoordinatesTitle",{defaultMessage:"Geo coordinates"}),aggFilter:["geohash_grid"],min:1,max:1}])},setup:async vis=>{let tmsLayers;try{const serviceSettings=await getServiceSettings();tmsLayers=await serviceSettings.getTMSServices()}catch(e){return vis}vis.type.editorConfig.collections.tmsLayers=tmsLayers;if(!vis.params.wms.selectedTmsLayer&&tmsLayers.length){vis.params.wms.selectedTmsLayer=tmsLayers[0]}return vis}}}function plugin_defineProperty(obj,key,value){key=plugin_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function plugin_toPropertyKey(arg){var key=plugin_toPrimitive(arg,"string");return typeof key==="symbol"?key:String(key)}function plugin_toPrimitive(input,hint){if(typeof input!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(typeof res!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return(hint==="string"?String:Number)(input)}class plugin_TileMapPlugin{constructor(initializerContext){plugin_defineProperty(this,"initializerContext",void 0);this.initializerContext=initializerContext}async setup(core,_ref){let{expressions:expressions,visualizations:visualizations,mapsLegacy:mapsLegacy}=_ref;const{getZoomPrecision:getZoomPrecision,getPrecision:getPrecision,getServiceSettings:getServiceSettings}=mapsLegacy;const visualizationDependencies={getZoomPrecision:getZoomPrecision,getPrecision:getPrecision,BaseMapsVisualization:mapsLegacy.getBaseMapsVis(),uiSettings:core.uiSettings,getServiceSettings:getServiceSettings};expressions.registerFunction(()=>createTileMapFn(visualizationDependencies));visualizations.createBaseVisualization(createTileMapTypeDefinition(visualizationDependencies));const config=this.initializerContext.config.get();return{config:config}}start(core,plugins){setFormatService(plugins.data.fieldFormats);setQueryService(plugins.data.query);setOpenSearchDashboardsLegacy(plugins.opensearchDashboardsLegacy);setShareService(plugins.share);setCoreService(core);return{}}}function public_plugin(initializerContext){return new plugin_TileMapPlugin(initializerContext)}},function(module,exports){module.exports=__osdSharedDeps__.Jquery}]);